TARGET 0 - 'migration': ELF-X86, 0x000000080483b0 entry, 1964/2 executable bytes/segments 

0x00000008048446: adc [eax+0x68], dl; or al, 0xa0; add al, 0x8; call edx; 
0x00000008048476: adc [eax-0x36fef7fc], ah; rep ret; 
0x00000008048661: adc al, 0x41; ret; 
0x0000000804849e: adc al, 0x50; call edx; 
0x0000000804840d: adc al, 0x68; or al, 0xa0; add al, 0x8; call eax; 
0x00000008048417: adc cl, cl; rep ret; 
0x00000008048532: adc dword ptr [edi+edi*8], 0xffffffff; jmp far fword ptr [ecx]; 
0x00000008048368: add [eax], al; add esp, 0x8; pop ebx; ret; 
0x00000008048403: add [ebp+0x551174c0], al; mov ebp, esp; sub esp, 0x14; push 0x804a00c; call eax; 
0x00000008048494: add [ebp+0x55f274d2], al; mov ebp, esp; sub esp, 0x14; push eax; call edx; 
0x00000008048547: add [ebx+0x74ff04ec], al; and al, 0x2c; push dword ptr [esp+0x2c]; push ebp; call dword ptr [ebx+edi*4-0xec]; 
0x00000008048478: add al, 0x8; add ecx, ecx; rep ret; 
0x00000008048411: add al, 0x8; call eax; 
0x0000000804844b: add al, 0x8; call edx; 
0x0000000804856f: add bl, dh; ret; 
0x00000008048475: add eax, 0x804a010; add ecx, ecx; rep ret; 
0x0000000804857d: add ebx, 0x1a5f; add esp, 0x8; pop ebx; ret; 
0x0000000804847a: add ecx, ecx; rep ret; 
0x00000008048415: add esp, 0x10; leave; rep ret; 
0x0000000804836a: add esp, 0x8; pop ebx; ret; 
0x000000080484ff: add esp, 0xc; nop; nop; leave; ret; 
0x0000000804865e: and [edi+0xe], al; adc al, 0x41; ret; 
0x0000000804854d: and al, 0x2c; push dword ptr [esp+0x2c]; push ebp; call dword ptr [ebx+edi*4-0xec]; 
0x00000008048551: and al, 0x2c; push ebp; call dword ptr [ebx+edi*4-0xec]; 
0x000000080485ef: call dword ptr [eax]; 
0x000000080484aa: call dword ptr [ebp-0x77]; 
0x00000008048554: call dword ptr [ebx+edi*4-0xec]; 
0x00000008048413: call eax; 
0x0000000804844d: call edx; 
0x000000080485c7: call esp; 
0x00000008048633: call far fword ptr [ebp]; 
0x00000008048613: call far fword ptr [ebx]; 
0x000000080484fb: cmp esi, 0xc483ffff; or al, 0x90; nop; leave; ret; 
0x00000008048530: dec dword ptr [ebp-0xeb7d]; jmp far fword ptr [ecx]; 
0x0000000804865c: dec ebp; push cs; and [edi+0xe], al; adc al, 0x41; ret; 
0x00000008048445: in al, dx; adc [eax+0x68], dl; or al, 0xa0; add al, 0x8; call edx; 
0x0000000804849d: in al, dx; adc al, 0x50; call edx; 
0x0000000804840c: in al, dx; adc al, 0x68; or al, 0xa0; add al, 0x8; call eax; 
0x0000000804849b: in eax, 0x83; in al, dx; adc al, 0x50; call edx; 
0x000000080484fe: inc dword ptr [ebx-0x6f6ff33c]; leave; ret; 
0x00000008048662: inc ecx; ret; 
0x0000000804865f: inc edi; push cs; adc al, 0x41; ret; 
0x00000008048473: inc esi; add eax, 0x804a010; add ecx, ecx; rep ret; 
0x0000000804856e: jbe short 0x08048570; rep ret; 
0x0000000804854c: je short 0x08048572; sub al, 0xff; je short 0x08048576; sub al, 0x55; call dword ptr [ebx+edi*4-0xec]; 
0x00000008048550: je short 0x08048576; sub al, 0x55; call dword ptr [ebx+edi*4-0xec]; 
0x000000080484c3: jmp dword ptr [ecx+0x804a008]; 
0x000000080485b7: jmp far fword ptr [eax]; 
0x00000008048536: jmp far fword ptr [ecx]; 
0x0000000804856d: lea esi, [esi]; rep ret; 
0x00000008048418: leave; rep ret; 
0x00000008048504: leave; ret; 
0x00000008048500: les ecx, [eax+edx*4]; nop; leave; ret; 
0x0000000804836b: les ecx, [eax]; pop ebx; ret; 
0x00000008048566: les ecx, [ebx+ebx*2]; pop esi; pop edi; pop ebp; ret; 
0x00000008048416: les edx, [eax]; leave; rep ret; 
0x00000008048477: mov al, [0xc9010804]; rep ret; 
0x00000008048410: mov al, [0xd0ff0804]; add esp, 0x10; leave; rep ret; 
0x0000000804844a: mov al, [0xd2ff0804]; add esp, 0x10; leave; rep ret; 
0x00000008048474: mov byte ptr [0x804a010], 0x1; leave; rep ret; 
0x00000008048442: mov ebp, esp; sub esp, 0x10; push eax; push 0x804a00c; call edx; 
0x00000008048409: mov ebp, esp; sub esp, 0x14; push 0x804a00c; call eax; 
0x0000000804849a: mov ebp, esp; sub esp, 0x14; push eax; call edx; 
0x000000080483e0: mov ebx, [esp]; ret; 
0x00000008048503: nop; leave; ret; 
0x000000080483df: nop; mov ebx, [esp]; ret; 
0x00000008048502: nop; nop; leave; ret; 
0x000000080483dd: nop; xchg ax, ax; mov ebx, [esp]; ret; 
0x000000080483db: nop; xchg ax, ax; xchg ax, ax; mov ebx, [esp]; ret; 
0x00000008048479: or [ecx], al; leave; rep ret; 
0x00000008048567: or al, 0x5b; pop esi; pop edi; pop ebp; ret; 
0x00000008048501: or al, 0x90; nop; leave; ret; 
0x0000000804840f: or al, 0xa0; add al, 0x8; call eax; 
0x00000008048449: or al, 0xa0; add al, 0x8; call edx; 
0x00000008048412: or bh, bh; rol byte ptr [ebx-0xc36ef3c], 0x1; ret; 
0x0000000804844c: or bh, bh; rol byte ptr [ebx-0xc36ef3c], cl; ret; 
0x0000000804856b: pop ebp; ret; 
0x00000008048568: pop ebx; pop esi; pop edi; pop ebp; ret; 
0x0000000804836d: pop ebx; ret; 
0x0000000804856a: pop edi; pop ebp; ret; 
0x00000008048569: pop esi; pop edi; pop ebp; ret; 
0x0000000804840e: push 0x804a00c; call eax; 
0x00000008048448: push 0x804a00c; call edx; 
0x00000008048660: push cs; adc al, 0x41; ret; 
0x0000000804865d: push cs; and [edi+0xe], al; adc al, 0x41; ret; 
0x0000000804865a: push cs; xor [ebp+0xe], cl; and [edi+0xe], al; adc al, 0x41; ret; 
0x0000000804854b: push dword ptr [esp+0x2c]; push dword ptr [esp+0x2c]; push ebp; call dword ptr [ebx+edi*4-0xec]; 
0x0000000804854f: push dword ptr [esp+0x2c]; push ebp; call dword ptr [ebx+edi*4-0xec]; 
0x0000000804849f: push eax; call edx; 
0x00000008048447: push eax; push 0x804a00c; call edx; 
0x00000008048553: push ebp; call dword ptr [ebx+edi*4-0xec]; 
0x00000008048408: push ebp; mov ebp, esp; sub esp, 0x14; push 0x804a00c; call eax; 
0x00000008048498: push ebp; mov ebp, esp; sub esp, 0x14; push eax; call edx; 
0x00000008048499: push ebp; mov ebp, esp; sub esp, 0x14; push eax; call edx; 
0x00000008048419: rep ret; 
0x00000008048356: ret; 
0x00000008048414: rol byte ptr [ebx-0xc36ef3c], 0x1; ret; 
0x0000000804844e: rol byte ptr [ebx-0xc36ef3c], cl; ret; 
0x000000080483e1: sbb al, 0x24; ret; 
0x00000008048496: shl byte ptr [edx+esi*8+0x55], cl; mov ebp, esp; sub esp, 0x14; push eax; call edx; 
0x00000008048552: sub al, 0x55; call dword ptr [ebx+edi*4-0xec]; 
0x0000000804854e: sub al, 0xff; je short 0x08048576; sub al, 0x55; call dword ptr [ebx+edi*4-0xec]; 
0x00000008048444: sub esp, 0x10; push eax; push 0x804a00c; call edx; 
0x0000000804840b: sub esp, 0x14; push 0x804a00c; call eax; 
0x0000000804849c: sub esp, 0x14; push eax; call edx; 
0x00000008048548: sub esp, 0x4; push dword ptr [esp+0x2c]; push dword ptr [esp+0x2c]; push ebp; call dword ptr [ebx+edi*4-0xec]; 
0x000000080483de: xchg ax, ax; mov ebx, [esp]; ret; 
0x000000080483dc: xchg ax, ax; xchg ax, ax; mov ebx, [esp]; ret; 
0x000000080483da: xchg ax, ax; xchg ax, ax; xchg ax, ax; mov ebx, [esp]; ret; 
0x0000000804865b: xor [ebp+0xe], cl; and [edi+0xe], al; adc al, 0x41; ret; 

CONFIG [ search: ROP-JOP-SYS (default), x_match: none, max_len: 5, syntax: Intel, regex_filter: none ]
RESULT [ unique_gadgets: 110, search_time: 8.819828ms, print_time: 17.922757ms ]
